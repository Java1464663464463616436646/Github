import tkinter as tk
from tkinter import filedialog
import heapq
from collections import defaultdict

class NodoHuffman:
    def __init__(self, caracter, frecuencia):
        self.caracter = caracter
        self.frecuencia = frecuencia
        self.izquierda = None
        self.derecha = None

    def __lt__(self, otro):
        return self.frecuencia < otro.frecuencia

def construir_arbol_huffman(frecuencias):
    cola_prioridad = [NodoHuffman(caracter, frecuencia) for caracter, frecuencia in frecuencias.items()]
    heapq.heapify(cola_prioridad)

    while len(cola_prioridad) > 1:
        nodo_izq = heapq.heappop(cola_prioridad)
        nodo_der = heapq.heappop(cola_prioridad)

        nodo_interno = NodoHuffman(None, nodo_izq.frecuencia + nodo_der.frecuencia)
        nodo_interno.izquierda = nodo_izq
        nodo_interno.derecha = nodo_der

        heapq.heappush(cola_prioridad, nodo_interno)

    return cola_prioridad[0]

def codigos_huffman(arbol, prefijo="", codigos=None):
    if codigos is None:
        codigos = {}

    if arbol.caracter is not None:
        codigos[arbol.caracter] = prefijo
    else:
        codigos_huffman(arbol.izquierda, prefijo + "0", codigos)
        codigos_huffman(arbol.derecha, prefijo + "1", codigos)

    return codigos

def obtener_caracteres_frecuencias(arbol):
    caracteres_frecuencias = []
    
    def _obtener_caracteres_frecuencias(nodo):
        if nodo is not None:
            if nodo.caracter is not None:
                caracteres_frecuencias.append((nodo.caracter, nodo.frecuencia))
            _obtener_caracteres_frecuencias(nodo.izquierda)
            _obtener_caracteres_frecuencias(nodo.derecha)
    
    _obtener_caracteres_frecuencias(arbol)
    return caracteres_frecuencias

def inicio(ventana):
    ventana.title("Codificación Huffman")

    ventana.grid_rowconfigure(0, weight=1)
    ventana.grid_rowconfigure(1, weight=1)
    ventana.grid_columnconfigure(0, weight=1)
    
    # Marco principal
    main_frame = tk.Frame(ventana)
    main_frame.grid(row=0, column=0, sticky="nsew")
    main_frame.grid_rowconfigure(0, weight=1)
    main_frame.grid_columnconfigure(0, weight=1)
    
    # Marco para el texto de entrada
    textoFrame = tk.Frame(main_frame, padx=5, pady=5)
    textoFrame.grid(row=0, column=0, sticky="nsew")
    textoFrame.grid_rowconfigure(0, weight=1)
    textoFrame.grid_columnconfigure(0, weight=1)
    
    # Marco para el resultado
    resultadoFrame = tk.Frame(main_frame, padx=5, pady=5)
    resultadoFrame.grid(row=0, column=1, sticky="nsew")
    resultadoFrame.grid_rowconfigure(0, weight=1)
    resultadoFrame.grid_columnconfigure(0, weight=1)

    # Marco para el árbol de Huffman
    arbolFrame = tk.Frame(main_frame, padx=5, pady=5)
    arbolFrame.grid(row=0, column=2, sticky="nsew")
    arbolFrame.grid_rowconfigure(0, weight=1)
    arbolFrame.grid_columnconfigure(0, weight=1)

    # Entrada de texto
    contenidoPalabras = tk.Text(textoFrame, wrap="word")
    contenidoPalabras.grid(row=0, column=0, sticky="nsew")

    # Resultado
    resultadoTexto = tk.Text(resultadoFrame, wrap="word")
    resultadoTexto.grid(row=0, column=0, sticky="nsew")

    # Árbol de Huffman
    arbolTexto = tk.Text(arbolFrame, wrap="word")
    arbolTexto.grid(row=0, column=0, sticky="nsew")

    # Botones
    botonesFrame = tk.Frame(ventana)
    botonesFrame.grid(row=1, column=0, sticky="ew")

    boton1 = tk.Button(botonesFrame, text="Examinar", command=lambda: examinarArchivo(contenidoPalabras, resultadoTexto))
    boton1.grid(row=0, column=0, padx=5, pady=5)

    boton2 = tk.Button(botonesFrame, text="Contar Caracteres", command=lambda: contarFrecuencia(contenidoPalabras, resultadoTexto))
    boton2.grid(row=0, column=1, padx=5, pady=5)

    boton3 = tk.Button(botonesFrame, text="Comprimir", command=lambda: comprimirArchivo(contenidoPalabras))
    boton3.grid(row=0, column=2, padx=5, pady=5)

    boton4 = tk.Button(botonesFrame, text="Descomprimir", command=lambda: descomprimirArchivo(resultadoTexto))
    boton4.grid(row=0, column=3, padx=5, pady=5)

    boton5 = tk.Button(botonesFrame, text="Construir Árbol de Huffman", command=lambda: construir_y_mostrar_arbol(contenidoPalabras, arbolTexto, resultadoTexto))
    boton5.grid(row=0, column=4, padx=5, pady=5)

def examinarArchivo(texto, resultado):
    rutaArchivo = filedialog.askopenfilename()
    
    if rutaArchivo: 
          
        with open(rutaArchivo, 'r') as archivo:
            contenido = archivo.read()
            texto.delete("1.0", tk.END)  
            texto.insert(tk.END, contenido)

            print("Ruta del archivo seleccionado:", rutaArchivo)

    else:
        print("No se seleccionó ningún archivo.")

def contarFrecuencia(texto, resultado):
    contenido = texto.get("1.0", tk.END)
    frecuencia = {}

    for char in contenido:
        if char in frecuencia:
            frecuencia[char] += 1
        else:
            frecuencia[char] = 1

    resultado.config(state=tk.NORMAL)
    resultado.delete("1.0", tk.END)
    resultado.insert(tk.END, "Lista:\n")    
    for char, count in frecuencia.items():
        resultado.insert(tk.END, f"Carácter: '{char}' {count}\n")
    resultado.config(state=tk.DISABLED)

def comprimir_texto(texto, codigos):
    texto_comprimido = "".join(codigos[char] for char in texto)
    return texto_comprimido

def descomprimir_texto(texto_comprimido, arbol):
    texto_descomprimido = ""
    nodo_actual = arbol

    for bit in texto_comprimido:
        if bit == "0":
            nodo_actual = nodo_actual.izquierda
        else:
            nodo_actual = nodo_actual.derecha

        if nodo_actual.caracter is not None:
            texto_descomprimido += nodo_actual.caracter
            nodo_actual = arbol

    return texto_descomprimido

def guardar_datos_comprimidos(texto_comprimido, archivo_salida):
    with open(archivo_salida, "wb") as archivo:
        archivo.write(int(texto_comprimido, 2).to_bytes((len(texto_comprimido) + 7) // 8, byteorder="big"))

def leer_datos_comprimidos(archivo_entrada):
    with open(archivo_entrada, "rb") as archivo:
        return "".join(format(byte, "08b") for byte in archivo.read())

def comprimirArchivo(texto):
    contenido = texto.get("1.0", tk.END)
    frecuencia = defaultdict(int)

    for char in contenido:
        frecuencia[char] += 1

    arbol = construir_arbol_huffman(frecuencia)
    codigos = codigos_huffman(arbol)

    texto_comprimido = comprimir_texto(contenido, codigos)
    nombre_archivo = filedialog.asksaveasfilename(defaultextension=".huf")
    if nombre_archivo:
        guardar_datos_comprimidos(texto_comprimido, nombre_archivo)

def descomprimirArchivo(resultado):
    archivo_comprimido = filedialog.askopenfilename()
    if archivo_comprimido:
        texto_comprimido = leer_datos_comprimidos(archivo_comprimido)
        frecuencia = defaultdict(int)

        for bit in texto_comprimido:
            frecuencia[bit] += 1

        arbol = construir_arbol_huffman(frecuencia)
        resultado_texto = descomprimir_texto(texto_comprimido, arbol)
        resultado.delete("1.0", tk.END)
        resultado.insert(tk.END, resultado_texto)

def mostrar_arbol(arbol, arbolTexto, nivel=0):
    if arbol is not None:
        # Mostrar subárbol derecho
        mostrar_arbol(arbol.derecha, arbolTexto, nivel + 1)
        
        # Agregar indentación
        arbolTexto.insert(tk.END, '\t' * nivel)
        
        # Agregar información del nodo actual
        if arbol.caracter is not None:
            arbolTexto.insert(tk.END, f"Carácter: {arbol.caracter}, Frecuencia: {arbol.frecuencia}\n")
        
        # Mostrar subárbol izquierdo
        mostrar_arbol(arbol.izquierda, arbolTexto, nivel + 1)

def mostrar_caracteres_frecuencias(caracteres_frecuencias, resultadoTexto):
    resultadoTexto.config(state=tk.NORMAL)
    resultadoTexto.delete("1.0", tk.END)
    resultadoTexto.insert(tk.END, "Caracteres y sus representaciones en binario:\n")
    for caracter, frecuencia in caracteres_frecuencias:
        binario = bin(ord(caracter))[2:]  # Eliminar el prefijo "0b"
        resultadoTexto.insert(tk.END, f"{caracter}: {binario}\n")
    resultadoTexto.config(state=tk.DISABLED)

def construir_y_mostrar_arbol(texto, arbolTexto, resultadoTexto):
    contenido = texto.get("1.0", tk.END)
    frecuencia = defaultdict(int)

    for char in contenido:
        frecuencia[char] += 1

    arbol = construir_arbol_huffman(frecuencia)
    mostrar_arbol(arbol, arbolTexto)
    caracteres_frecuencias = obtener_caracteres_frecuencias(arbol)
    mostrar_caracteres_frecuencias(caracteres_frecuencias, resultadoTexto)

ventana = tk.Tk()
inicio(ventana)
ventana.mainloop()
